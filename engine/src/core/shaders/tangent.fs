const std::string InternalShaders::tangentFragmentShader =
"uniform int wireframe;\n"
"in vec3 FragPos;\n"
"in vec3 Normal;\n"
"in vec2 TexCoord;\n"
"out vec4 FragColor;\n"
"void main(void)\n"
"{\n"
"    // derivations of the fragment position\n"
"    vec3 pos_dx = dFdx(FragPos);\n"
"    vec3 pos_dy = dFdy(FragPos);\n"
"    // derivations of the texture coordinate\n"
"    vec2 texC_dx = dFdx(TexCoord);\n"
"    vec2 texC_dy = dFdy(TexCoord);\n"
"    // tangent vector and binormal vector\n"
"    vec3 tangent = texC_dy.y * pos_dx - texC_dx.y * pos_dy;\n"
"    tangent = tangent - Normal * dot(tangent, Normal);\n"
"    FragColor = vec4(normalize(tangent), 1.0f);\n"
"}\n";